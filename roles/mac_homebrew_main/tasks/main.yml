---
- name: Determine Homebrew ownership variables
  set_fact:
    main_homebrew_user: '{{ main_homebrew_user | default(ansible_user_id) }}'
    main_homebrew_group: '{{ main_homebrew_group | default(ansible_user_gid) }}'

# Homebrew setup prerequisites.
- name: Ensure Homebrew parent directory has correct permissions (M1).
  file:
    path: '{{ main_homebrew_prefix }}'
    owner: '{{ main_homebrew_user }}'
    state: directory
  become: true
  when: ansible_machine == 'arm64'

- name: Ensure Homebrew parent directory has correct permissions (Intel).
  block:
    - name: Ensure Homebrew parent directory has correct permissions (MacOS >= 10.13).
      file:
        path: '{{ main_homebrew_prefix }}'
        owner: root
        state: directory
      become: true
      when: "ansible_distribution_version is version('10.13', '>=')"

    - name: Ensure Homebrew parent directory has correct permissions (MacOS < 10.13).
      file:
        path: '{{ main_homebrew_prefix }}'
        owner: root
        group: admin
        state: directory
        mode: 0775
      become: true
      when: "ansible_distribution_version is version('10.13', '<')"
  when: ansible_machine == 'x86_64'

- name: Ensure Homebrew directory exists.
  file:
    path: '{{ main_homebrew_install_path }}'
    owner: '{{ main_homebrew_user }}'
    group: '{{ main_homebrew_group }}'
    state: directory
    mode: 0775
  become: true

# Clone Homebrew.
- name: Ensure Homebrew is installed.
  git:
    repo: '{{ main_homebrew_repo }}'
    version: master
    dest: '{{ main_homebrew_install_path }}'
    update: false
    depth: 1
  become: true
  become_user: '{{ main_homebrew_user }}'

# Adjust Homebrew permissions.
- name: Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.
  file:
    path: '{{ main_homebrew_brew_bin_path }}'
    state: directory
    owner: '{{ main_homebrew_user }}'
    group: '{{ main_homebrew_group }}'
    mode: 0775
  become: true

- name: Ensure proper ownership on homebrew_install_path subdirs.
  file:
    path: '{{ main_homebrew_install_path }}'
    state: directory
    owner: '{{ main_homebrew_user }}'
    group: '{{ main_homebrew_group }}'
    recurse: true
  become: true

# Place brew binary in proper location and complete setup.
- name: Check if homebrew binary is already in place.
  stat: 'path={{ main_homebrew_brew_bin_path }}/brew'
  register: main_homebrew_binary
  check_mode: false

- name: Symlink brew to homebrew_brew_bin_path.
  file:
    src: '{{ main_homebrew_install_path }}/bin/brew'
    dest: '{{ main_homebrew_brew_bin_path }}/brew'
    state: link
  when: not main_homebrew_binary.stat.exists
  become: true

- name: Ensure proper homebrew folders are in place.
  file:
    path: '{{ main_homebrew_prefix }}/{{ item }}'
    state: directory
    owner: '{{ main_homebrew_user }}'
    group: '{{ main_homebrew_group }}'
  become: true
  loop: '{{ main_homebrew_folders_base + homebrew_folders_additional }}'

- name: Collect package manager fact.
  setup:
    filter: ansible_pkg_mgr

- name: Perform brew installation.
  block:
    - name: Force update brew after installation.
      command: '{{ main_homebrew_brew_bin_path }}/brew update --force'
      when: not main_homebrew_binary.stat.exists

    - name: Where is the cache?
      command: '{{ main_homebrew_brew_bin_path }}/brew --cache'
      register: main_homebrew_cache_path
      changed_when: false
      check_mode: false

    # Tap.
    - name: Ensure configured taps are tapped.
      homebrew_tap:
        tap: '{{ item.name | default(item) }}'
        url: '{{ item.url | default(omit) }}'
        state: present
      loop: '{{ main_homebrew_taps }}'

    # Cask.
    - name: Ensure blacklisted cask applications are not installed.
      homebrew_cask: 'name={{ item }} state=absent'
      loop: '{{ main_homebrew_cask_uninstalled_apps }}'

    - name: Install configured cask applications.
      homebrew_cask:
        name: '{{ item.name | default(item) }}'
        state: present
        install_options: "{{ item.install_options | default('appdir=' + main_homebrew_cask_appdir) }}"
        accept_external_apps: '{{ main_homebrew_cask_accept_external_apps }}'
        sudo_password: '{{ ansible_become_password | default(omit) }}'
      loop: '{{ main_homebrew_cask_apps }}'
      notify:
        - Clear homebrew cache

    # Brew.
    - name: Ensure blacklisted homebrew packages are not installed.
      homebrew: 'name={{ item }} state=absent'
      loop: '{{ main_homebrew_uninstalled_packages }}'

    - name: Ensure configured homebrew packages are installed.
      homebrew:
        name: '{{ item.name | default(item) }}'
        install_options: '{{ item.install_options | default(omit) }}'
        state: "{{ item.state | default('present') }}"
      loop: '{{ main_homebrew_installed_packages }}'
      notify:
        - Clear homebrew cache

    - name: Upgrade all homebrew packages (if configured).
      homebrew: update_homebrew=yes upgrade_all=yes
      when: main_homebrew_upgrade_all_packages
      notify:
        - Clear homebrew cache

    - name: Check for Brewfile.
      stat:
        path: '{{ main_homebrew_brewfile_dir }}/Brewfile'
      register: main_homebrew_brewfile
      check_mode: false

    - name: Install from Brewfile.
      command: '{{ main_homebrew_brew_bin_path }}/brew bundle chdir={{ main_homebrew_brewfile_dir }}'
      when: main_homebrew_brewfile.stat.exists and main_homebrew_use_brewfile

  # Privilege escalation is only required for inner steps when
  # the `homebrew_user` doesn't match the `ansible_user_id`
  become: '{{ (main_homebrew_user != ansible_user_id) | bool }}'
  become_user: '{{ main_homebrew_user }}'
